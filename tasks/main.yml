---
# tasks file for mediafellows.clickhouse role

# Ubuntu/Debian Installation steps:
# https://clickhouse.yandex/docs/en/getting_started/index.html#installation

- name: Create /data for a DB mountpoint
  ansible.builtin.file:
    path: "{{ clickhouse_data_disk_mountpoint }}"
    state: directory
    mode: 0755
    owner: root
  register: dir_creation
  when: clickhouse_data_disk_mountpoint is defined

- name: Format data disk as ext4 for the install process
  ansible.builtin.shell:
    cmd: 'mkfs -t ext4 {{ clickhouse_data_disk }}'
  when: clickhouse_data_disk is defined and dir_creation.changed

- name: Ensure instance storage gets mounted in the right place (/data)
  mount:
    name: "{{ clickhouse_data_disk_mountpoint }}"
    src: "{{ clickhouse_data_disk }}"
    fstype: ext4
    opts: defaults,noatime
    state: mounted
  when: clickhouse_data_disk is defined and clickhouse_data_disk_mountpoint is defined

- name: Add clickhouse apt repo key
  ansible.builtin.apt_key:
    keyserver: keyserver.ubuntu.com
    id: E0C56BD4
    state: present

- name: Install clihouse apt repo
  ansible.builtin.apt_repository:
    repo: 'deb http://repo.yandex.ru/clickhouse/deb/stable/ main/'
    state: present

- name: Install Clickhouse apt packages in specific version (if provided)
  ansible.builtin.apt:
    name:
      - "clickhouse-common-static={{ clickhouse_package_version }}"
      - "clickhouse-client={{ clickhouse_package_version }}"
      - "clickhouse-server={{ clickhouse_package_version }}"
    state: present
  when: clickhouse_package_version is defined
  notify:
    - restart clickhouse

- name: Install latest Clickhouse apt packages (unless speicific version is provided)
  ansible.builtin.apt:
    name:
      - clickhouse-client
      - clickhouse-server
    state: present
  when: clickhouse_package_version is undefined
  notify:
    - restart clickhouse

# Configuration steps:
# https://clickhouse.yandex/docs/en/operations/server_settings/settings/

- name: Ensure clickhouse config, data and log dirs exist
  ansible.builtin.file:
    dest: "{{ item }}"
    owner: clickhouse
    group: clickhouse
    state: directory
  with_items:
    - "{{ clickhouse_path_logdir }}"
    - "{{ clickhouse_path_configdir }}"
    - "{{ clickhouse_path_tmp }}"
    - "{{ clickhouse_path_data }}"

- name: Add clickhouse config.d/ configs
  ansible.builtin.template:
    src: "config.d/{{ item }}.j2"
    dest: "{{ clickhouse_path_configdir }}/config.d/{{ item }}"
    owner: clickhouse
    group: clickhouse
  with_items:
    - logger.xml
    - network.xml
    - remote_hosts.xml
    - dirs.xml
  notify:
    - restart clickhouse

- name: Add clickhouse users.d/ configs
  ansible.builtin.template:
    src: "users.d/{{ item }}.j2"
    dest: "{{ clickhouse_path_configdir }}/users.d/{{ item }}"
    owner: clickhouse
    group: clickhouse
  with_items:
    - profiles.xml
    - quotas.xml
    - users.xml
  notify:
    - restart clickhouse

- name: Make sure clickhouse-server is started and enabled on boot
  ansible.builtin.service:
    name: clickhouse-server
    state: started
    enabled: true
  register: start_task

- name: Wait for start if service was just started
  ansible.builtin.pause:
    seconds: 5
  when: start_task.changed

- name: Display users.xml contents
  command: cat users.xml  chdir=/etc/clickhouse-server/users.d
  register: command_output

- name: Print to console
  debug:
    msg: "{{command_output.stdout}}"

# Add DBs and dictionaries (optional preparation steps):

- name: Gather list of existing databases
  ansible.builtin.shell:
    cmd: "clickhouse-client -h 127.0.0.1 --user default --password '{{ clickhouse_client_password }}' -q 'show databases'"
  register: existing_databases

- name: Delete databases based on clickhouse_dbs directive
  ansible.builtin.shell:
    cmd: "clickhouse-client -h 127.0.0.1 --user default --password '{{ clickhouse_client_password }}' -q 'DROP DATABASE IF EXISTS `{{ item.name }}`'"
  with_items: "{{ clickhouse_dbs }}"
  when:
    - clickhouse_dbs is defined
    - item.state is defined and item.state == 'absent' and item.name in existing_databases.stdout_lines

- name: Create databases based on clickhouse_dbs directive
  ansible.builtin.shell:
    cmd: "clickhouse-client -h 127.0.0.1 --user default --password '{{ clickhouse_client_password }}' -q 'CREATE DATABASE IF NOT EXISTS `{{ item.name }}`'"
  with_items: "{{ clickhouse_dbs }}"
  when:
    - clickhouse_dbs is defined
    - (item.state is undefined or item.state == 'present') and item.name not in existing_databases.stdout_lines

- name: Run handlers
  ansible.builtin.meta: flush_handlers

---
# tasks file for mediapeers.clickhouse role

# Ubuntu/Debian Installation steps:
# https://clickhouse.yandex/docs/en/getting_started/index.html#installation

- name: Add clickhouse apt repo key
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: E0C56BD4
    state: present

- name: Install clihouse apt repo
  apt_repository:
    repo: 'deb http://repo.yandex.ru/clickhouse/deb/stable/ main/'
    state: present

- name: Install Clickhouse apt packages
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - clickhouse-client
    - clickhouse-server

# Configuration steps:
# https://clickhouse.yandex/docs/en/operations/server_settings/settings/

- name: Ensure clickhouse config, data and log dirs exist
  file:
    dest: "{{ item }}"
    owner: clickhouse
    group: clickhouse
    state: directory
  with_items:
    - "{{ clickhouse_path_logdir }}"
    - "{{ clickhouse_path_configdir }}"
    - "{{ clickhouse_path_tmp }}"
    - "{{ clickhouse_path_data }}"

- name: Add clickhouse config
  template:
   src: config.j2
   dest: "{{ clickhouse_path_configdir }}/config.xml"
   owner: clickhouse
   group: clickhouse

- name: Add clickhouse users config
  template:
   src: users.j2
   dest: "{{ clickhouse_path_configdir }}/users.xml"
   owner: clickhouse
   group: clickhouse

# Get service going:

- name: Make sure clickhouse-server is (re)started and enabled on boot
  service:
    name: clickhouse-server
    state: restarted
    enabled: true

  # Add DBs and dictionaries (optional preparation steps):

- name: Gather list of existing databases
  command: "clickhouse-client -h localhost -q 'show databases'"
  register: existing_databases

- name: Delete databases based on clickhouse_dbs directive
  command: "clickhouse-client -h localhost -q 'DROP DATABASE IF EXISTS `{{ item.name }}`'"
  with_items: "{{ clickhouse_dbs }}"
  when:
    - clickhouse_dbs is defined
    - item.state is defined and item.state == 'absent' and item.name in existing_databases.stdout_lines

- name: Create databases based on clickhouse_dbs directive
  command: "clickhouse-client -h localhost -q 'CREATE DATABASE IF NOT EXISTS `{{ item.name }}`'"
  with_items: "{{ clickhouse_dbs }}"
  when:
    - clickhouse_dbs is defined
    - (item.state is undefined or item.state == 'present') and item.name not in existing_databases.stdout_lines

- name: Generate dictionary config if clickhouse_dicts is defined
  template:
    src: dicts.j2
    dest: "{{ clickhouse_path_configdir }}/auto_dictionary.xml"
  when: clickhouse_dicts is defined
